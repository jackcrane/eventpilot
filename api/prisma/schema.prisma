generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  otps                     Otp[]
  logs                     Log[]
  organizations            UserOrganization[]
  eventInvitationsSent     EventInvitation[]  @relation("InvitationsSent")
  eventInvitationsReceived EventInvitation[]  @relation("InvitationsReceived")
  todoItems                TodoItem[]
  todoItemComments         TodoItemComment[]
  events                   UserEvent[]
}

model Otp {
  id        String   @id @default(cuid())
  otp       Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  active    Boolean  @default(true)

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  logs   Log[]
}

model UserOrganization {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Organization {
  id                  String  @id @default(cuid())
  name                String
  website             String?
  publicContactEmail  String?
  privateContactEmail String?
  privateContactPhone String?
  category            String?

  legalName         String?
  taxId             String?
  type              String?
  addressLine1      String?
  addressLine2      String?
  city              String?
  state             String?
  zip               String?
  addressPublic     Boolean?
  legalContactEmail String?

  marketingPrimaryBannerImageId String? @unique
  marketingPrimaryBannerImage   Image?  @relation("marketingPrimaryBannerImage", fields: [marketingPrimaryBannerImageId], references: [id])
  marketingLogoId               String? @unique
  marketingLogo                 Image?  @relation("marketingLogo", fields: [marketingLogoId], references: [id])
  marketingSquareLogoId         String? @unique
  marketingSquareLogo           Image?  @relation("marketingSquareLogo", fields: [marketingSquareLogoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  users             UserOrganization[]
  events            Event[]
  logs              Log[]
  todoItems         TodoItem[]
  marketingContacts OrganizationMarketingContact[]

  billingConfig OrganizationBillingConfig?
}

// one-to-one relationship with Organization
model OrganizationBillingConfig {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organizationId String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  stripeCustomerId        String?
  stripeSubscriptionId    String?
  isInGoodPaymentStanding Boolean @default(false)

  tier BillingTier @default(ESSENTIALS)

  // OVERRIDES AND ADDITIONS
  override__orgWideCRM        Boolean @default(false)
  override__orgTeammates      Int     @default(0) /// Number of additional teammates on top of those included in the tier defaults.
  override__readOnlyTeammates Int     @default(0) /// Number of additional read-only teammates on top of those included in the tier defaults.
  override__fundraising       Boolean @default(false)
  override__emailMarketing    Int     @default(0) /// Number of additional emails on top of those included in the tier defaults.
  override__smsMarketing      Boolean @default(false)
}

model EventBillingConfig {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  eventId   String   @unique
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // OVERRIDES AND ADDITIONS
  override__eventPrice        Float   @default(0.0) /// Replace the default price per event charged by eventpilot.
  override__maxParticipants   Int     @default(0) /// Number of additional participants on top of those included in the tier defaults.
  override__eventWideCRM      Int     @default(0) /// Number of additional CRM rows on top of those included in the tier defaults.
  override__eventTeammates    Int     @default(0) /// Number of additional teammates on top of those included in the tier defaults.
  override__readOnlyTeammates Int     @default(0) /// Number of additional read-only teammates on top of those included in the tier defaults.
  override__fundraising       Boolean @default(false)
  override__emailMarketing    Int     @default(0) /// Number of additional emails on top of those included in the tier defaults.
  override__smsMarketing      Boolean @default(false)
  override__volunteerLimit    Int     @default(0) /// Number of additional volunteers on top of those included in the tier defaults.

  override__participantPortal            Boolean @default(false) /// Enable the participant portal for this event.
  override__participantSelfServicePortal Boolean @default(false) /// Enable the participant self-service portal for this event.
}

enum BillingTier {
  ESSENTIALS
  STANDARD
  PREMIUM
  ULTIMATE
}

model EventInvitation {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  status InvitationStatus @default(PENDING)

  // Relations
  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  invitedByUserId String
  invitedByUser   User   @relation("InvitationsSent", fields: [invitedByUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  invitedUserId String
  invitedUser   User   @relation("InvitationsReceived", fields: [invitedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userEventId String?    @unique
  userEvent   UserEvent? @relation(fields: [userEventId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  logs Log[]
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
  REVOKED
}

model UserEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  eventId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  logs Log[]

  eventInvitation EventInvitation?

  role UserEventRole
}

enum UserEventRole {
  OWNER
  ADMIN
  USER
  INVITEE
  SUSPENDED
  VIEWER
}

model Event {
  id String @id @default(cuid())

  name        String?
  description String?
  startDate   DateTime?
  endDate     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  invitations EventInvitation[]
  logs        Log[]
  todoItems   TodoItem[]
  users       UserEvent[]

  billingConfig EventBillingConfig?
}

model Log {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  data Json?

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  otpId String?
  otp   Otp?    @relation(fields: [otpId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  LogType LogType? @relation(fields: [type], references: [name], onDelete: Cascade, onUpdate: Cascade)
  type    String?

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  eventId String?
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  todoItemId String?
  todoItem   TodoItem? @relation(fields: [todoItemId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  todoItemCommentId String?
  todoItemComment   TodoItemComment? @relation(fields: [todoItemCommentId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  organizationMarketingContactId String?
  organizationMarketingContact   OrganizationMarketingContact? @relation(fields: [organizationMarketingContactId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  userEventId String?
  userEvent   UserEvent? @relation(fields: [userEventId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  eventInvitationId String?
  eventInvitation   EventInvitation? @relation(fields: [eventInvitationId], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model LogType {
  name String @id
  logs Log[]
}

model Image {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url  String
  key  String
  name String

  organizationPrimaryBannerImage Organization? @relation("marketingPrimaryBannerImage")
  organizationLogoImage          Organization? @relation("marketingLogo")
  organizationSquareLogo         Organization? @relation("marketingSquareLogo")
}

model TodoItem {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  dueDate         DateTime?
  dueDateTimezone String?

  todoType TodoItemType? @relation(fields: [type], references: [name])
  type     String?

  title String?
  text  String? @db.Text
  slug  String?
  href  String?

  stage TodoItemStage @default(OPEN)

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?

  event   Event?  @relation(fields: [eventId], references: [id])
  eventId String?

  logs     Log[]
  comments TodoItemComment[]

  deleted Boolean @default(false)

  blocking Boolean @default(false)
}

model TodoItemComment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text String @db.Text

  todoItemId String
  todoItem   TodoItem @relation(fields: [todoItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  userId String?
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  logs Log[]
}

model TodoItemType {
  name      String     @id
  todoItems TodoItem[]
}

enum TodoItemStage {
  OPEN
  IN_PROGRESS
  WAITING
  BLOCKED
  COMPLETE
  WONT_DO
}

model OrganizationMarketingContact {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name      String
  email     String
  phone     String
  gender    String
  birthyear Int
  source    String

  logs Log[]
}
